<?xml version="1.0" encoding="UTF-8"?>
<configuration status="off" monitorInterval="1800">
    <!--
    status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出 ,默认OFF
    monitorInterval : Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。

    %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
    %p : 日志输出格式
    %c : logger的名称
    %m : 日志内容，即 logger.info("message")
    %n : 换行符
    %C : Java类名
    %L : 日志输出所在行数
    %M : 日志输出所在方法名
    %t：表示当前线程名称
    %-5level：输出日志级别，-5表示左对齐并且固定输出5个字符
    %l：输出语句所在的包名、类名、函数名、行数
    hostName : 本地机器名 hostAddress : 本地ip地址

    <Async>属性用于是否异步，暂时忽略
    -->
    <Properties>
        <!-- 配置日志文件输出目录，此配置将日志输出到tomcat根目录下的指定文件夹 -->
        <!--<Property name="LOG_HOME">log4j2-test</Property>-->
        <Property name="LOG_HOME">log4j2-pro2</Property>
    </Properties>
    <appenders>

        <!--这个输出控制台的配置 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--<PatternLayout pattern="%d{HH:mm:ss.SSS}  [%t] %-5level %logger{36} - %msg%n"/>-->
            <PatternLayout pattern="%d{DEFAULT}  [%t] %-5level %logger{36} - %msg%n"/>
        </Console>

        <!-- INFO级别日志 -->
        <RollingRandomAccessFile name="info_appender"
                                 immediateFlush="true" fileName="${LOG_HOME}/info/info.log"
                                 filePattern="${LOG_HOME}/info/info - %d{yyyy-MM-dd HH_mm_ss}.log.gz">
            <PatternLayout>
                <pattern>%5p [%t] %d{yyyy-MM-dd HH:mm:ss} (%F:%L) %m%n</pattern>
            </PatternLayout>
            <Policies>
                <!-- 日志压缩触发条件 -->
                <!-- 每次日志超过size配置的大小，按filePattern的配置的格式进行压缩-->
                <SizeBasedTriggeringPolicy size="25MB"/>
                <!-- 此处是按时间进行压缩 根据filePattern中的时间格式 每隔一个单位进行压缩 此处是按天压缩-->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>

            </Policies>
            <Filters>
                <!--如果是warn级别拒绝-->
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingRandomAccessFile>

        <!-- ERROR级别日志 -->
        <RollingRandomAccessFile name="error_appender"
                                 immediateFlush="true" fileName="${LOG_HOME}/error/error.log"
                                 filePattern="${LOG_HOME}/error/error - %d{yyyy-MM-dd HH_mm_ss}.log.gz">
            <PatternLayout>
                <pattern>%5p [%t] %d{yyyy-MM-dd HH:mm:ss} (%F:%L) %m%n</pattern>
            </PatternLayout>
            <Policies>
                <!-- 日志压缩触发条件 -->
                <!-- 每次日志超过size配置的大小，按filePattern的配置的格式进行压缩-->
                <SizeBasedTriggeringPolicy size="25MB"/>
                <!-- 此处是按时间进行压缩 根据filePattern中的时间格式 每隔一个单位进行压缩 此处是按天压缩-->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>

            </Policies>
            <Filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingRandomAccessFile>

    </appenders>

    <!--定义logger，只有定义了logger并引入的appender，appender才会生效 -->
    <loggers>
        <root level="info">
            <appender-ref ref="Console"/>
            <appender-ref ref="info_appender"/>
        </root>
    </loggers>
</configuration>